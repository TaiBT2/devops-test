pipeline {
    environment {
        AWS_CREDENTIALS_ID = "aws-ecr-credentials"
        ECR_LOGIN_PASSWORD = "xxx"
        tag = "v-${createTag()}"
        registry = "xxxxxxx.dkr.ecr.ap-northeast-1.amazonaws.com"
        image = "${registry}/devops-test:${tag}"
        REPO = "https://github.com/TaiBT2/devops-test.git"
        BRANCH = "main"
    }
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:alpine 
    env:
    - name: JAVA_OPTS
      value: "-Xmx512m" 
    securityContext:
        runAsUser: 0
  - name: aws
    image: amazon/aws-cli:latest
    command:
    - cat
    tty: true
  - name: docker
    image: docker:dind
    command:
    - cat
    tty: true
    env:
    - name: DOCKER_HOST
      value: tcp://dind:2375
"""
        }
    }    
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', 
                              branches: [[name: "${BRANCH}"]], 
                              userRemoteConfigs: [[url: "${REPO}", credentialsId: 'git-credential-mtl']]
                    ])
                }
            }
        }
        stage ("update env file") {
            steps {
                script {
                    withCredentials([file(credentialsId: "DEVOPS-TEST-ENV", variable: "SECRET_FILE")]) {
                        sh "cp $SECRET_FILE .env"
                    }
                    
                }
            }
        }               
        stage('Retrieve ECR Login Password') {
            steps {
                container('aws') {
                    script {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
                            ECR_LOGIN_PASSWORD = sh(returnStdout: true, script: '''
                                aws ecr get-login-password --region ap-northeast-1
                            ''').trim()
                        }
                    }
                }
            }
        }

        stage('Login build and push image to ECR') {
            steps {
                container('docker') {
                    script {
                        writeFile file: 'docker-login.sh', text: """
                            #!/bin/sh
                            echo ${ECR_LOGIN_PASSWORD} | docker login --username AWS --password-stdin ${registry}
                        """
                        sh 'chmod +x docker-login.sh'
                        sh './docker-login.sh'
                        sh """
                            docker build -f Dockerfile  --tag ${image} .
                            docker push ${image}
                        """                          
                    }
                }
            }
        }
        stage('Update Helm chart') {
            steps {
                script {
                    def count = 0
                    while (true) {
                        try {
                            sh """                             
                                git clone https://github.com/TaiBT2/devops-test.git
                                cd devops-test
                                sed -i 's/tag: .*/tag: ${tag}/' devops/app-helm/values.yaml                                
                                git config --global user.email "devops@devops.io"
                                git config --global user.name "devops"
                                git add .
                                git commit -m 'update tag'
                                git push origin main               
                            """
                            break
                        } catch (Exception e) {
                            echo 'Exception occurred: ' + e.toString()
                        }
                        count++
                        if (count == 10) {
                            break 
                        }
                    }
                }
            }
        }
    }
}
@NonCPS
def createTag() {
    def date = new Date()
    def BUILD_NUMBER = env.BUILD_NUMBER
    return "${date.format('yyyyMMddHHmmss')}-${BUILD_NUMBER}"
}